{"ast":null,"code":"var _jsxFileName = \"/home/zodiac/Desktop/chat_gpt_project/src/components/ChatGPTdiv.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Cookies from \"universal-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LeftBox() {\n  _s();\n  const [question, setPrompt] = React.useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // console.log(question);\n\n    const cookies = new Cookies();\n    const cAccToken = cookies.get(\"accessToken\");\n    const reftoken = cookies.get(\"refreshToken\");\n    const response = await fetch('http://localhost:5000/users/question_to_gpt', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${cAccToken}`\n      },\n      body: JSON.stringify({\n        question,\n        reftoken\n      })\n    });\n    const json = await response.json();\n    if (response.ok) {\n      console.log(json.answer);\n      setchatHistory(prev => ({\n        array: [...prev, json.answer]\n      }));\n    } else {\n      console.log(\"cant get data\");\n    }\n  };\n\n  // For speech \n  const [isSpeaking, setIsSpeaking] = React.useState(false);\n  function TextToSpeech(_ref) {\n    let {\n      text\n    } = _ref;\n    const speak = () => {\n      const message = new SpeechSynthesisUtterance(text);\n      window.speechSynthesis.speak(message);\n      setIsSpeaking(true);\n    };\n    const stop = () => {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    };\n  }\n  function olla() {\n    const message = new SpeechSynthesisUtterance(\"hello there my name is hahaha\");\n    window.speechSynthesis.speak(message);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-area-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-textbox\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"ques--input\",\n          name: \"ques\",\n          value: question,\n          onChange: e => setPrompt(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send-icon\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"send\",\n        src: \"images/send.png\",\n        width: \"30px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send-icon\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"send\",\n        src: \"images/mic.png\",\n        width: \"14px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(LeftBox, \"yXPFlVVLTDviJalwY4HXLDKujJo=\");\n_c = LeftBox;\n;\nvar _c;\n$RefreshReg$(_c, \"LeftBox\");","map":{"version":3,"names":["React","Cookies","jsxDEV","_jsxDEV","LeftBox","_s","question","setPrompt","useState","handleSubmit","e","preventDefault","cookies","cAccToken","get","reftoken","response","fetch","method","headers","Authorization","body","JSON","stringify","json","ok","console","log","answer","setchatHistory","prev","array","isSpeaking","setIsSpeaking","TextToSpeech","_ref","text","speak","message","SpeechSynthesisUtterance","window","speechSynthesis","stop","cancel","olla","className","children","onSubmit","type","name","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","alt","src","width","_c","$RefreshReg$"],"sources":["/home/zodiac/Desktop/chat_gpt_project/src/components/ChatGPTdiv.js"],"sourcesContent":["import React from \"react\"\nimport Cookies from \"universal-cookie\"\n\nexport default function LeftBox() {\n\n    const [question, setPrompt] = React.useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        // console.log(question);\n\n        const cookies = new Cookies();\n        const cAccToken = cookies.get(\"accessToken\");\n        const reftoken = cookies.get(\"refreshToken\");\n\n        const response = await fetch('http://localhost:5000/users/question_to_gpt', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n                Authorization: `Bearer ${cAccToken}`\n            },\n            body: JSON.stringify({ question, reftoken })\n        })\n          \n        const json = await response.json();\n\n        if (response.ok) {\n            console.log(json.answer)\n            setchatHistory( prev => ({\n                array:[...prev, json.answer]\n            }))\n        }\n        else{\n            console.log(\"cant get data\");\n        }\n    };\n\n\n    // For speech \n    const [isSpeaking, setIsSpeaking] = React.useState(false);\n    function TextToSpeech({ text }) {    \n        const speak = () => {\n          const message = new SpeechSynthesisUtterance(text);\n          window.speechSynthesis.speak(message);\n          setIsSpeaking(true);\n        };\n      \n        const stop = () => {\n          window.speechSynthesis.cancel();\n          setIsSpeaking(false);\n        };\n    }\n    function olla(){\n        const message = new SpeechSynthesisUtterance(\"hello there my name is hahaha\");\n        window.speechSynthesis.speak(message);\n    }\n\n    return (\n        <div className=\"form-area-content\">\n            <div className=\"form-textbox\">\n                <form onSubmit={handleSubmit}>\n                    <input\n                        type=\"text\"\n                        className=\"ques--input\"\n                        name=\"ques\"\n                        value={question}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n                </form>\n            </div>\n            <div className=\"send-icon\">\n                <img alt=\"send\" src=\"images/send.png\" width=\"30px\"/>\n            </div>\n            <div className=\"send-icon\">\n                <img alt=\"send\" src=\"images/mic.png\" width=\"14px\"/>\n            </div>\n        </div>\n    )\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAE9B,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAGP,KAAK,CAACQ,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,EAAE;IAClB;;IAEA,MAAMC,OAAO,GAAG,IAAIX,OAAO,EAAE;IAC7B,MAAMY,SAAS,GAAGD,OAAO,CAACE,GAAG,CAAC,aAAa,CAAC;IAC5C,MAAMC,QAAQ,GAAGH,OAAO,CAACE,GAAG,CAAC,cAAc,CAAC;IAE5C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;MACxEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE,kBAAkB;QACzCC,aAAa,EAAG,UAASP,SAAU;MACvC,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEjB,QAAQ;QAAES;MAAS,CAAC;IAC/C,CAAC,CAAC;IAEF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACQ,IAAI,EAAE;IAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACbC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,MAAM,CAAC;MACxBC,cAAc,CAAEC,IAAI,KAAK;QACrBC,KAAK,EAAC,CAAC,GAAGD,IAAI,EAAEN,IAAI,CAACI,MAAM;MAC/B,CAAC,CAAC,CAAC;IACP,CAAC,MACG;MACAF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAChC;EACJ,CAAC;;EAGD;EACA,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGjC,KAAK,CAACQ,QAAQ,CAAC,KAAK,CAAC;EACzD,SAAS0B,YAAYA,CAAAC,IAAA,EAAW;IAAA,IAAV;MAAEC;IAAK,CAAC,GAAAD,IAAA;IAC1B,MAAME,KAAK,GAAGA,CAAA,KAAM;MAClB,MAAMC,OAAO,GAAG,IAAIC,wBAAwB,CAACH,IAAI,CAAC;MAClDI,MAAM,CAACC,eAAe,CAACJ,KAAK,CAACC,OAAO,CAAC;MACrCL,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,MAAMS,IAAI,GAAGA,CAAA,KAAM;MACjBF,MAAM,CAACC,eAAe,CAACE,MAAM,EAAE;MAC/BV,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC;EACL;EACA,SAASW,IAAIA,CAAA,EAAE;IACX,MAAMN,OAAO,GAAG,IAAIC,wBAAwB,CAAC,+BAA+B,CAAC;IAC7EC,MAAM,CAACC,eAAe,CAACJ,KAAK,CAACC,OAAO,CAAC;EACzC;EAEA,oBACInC,OAAA;IAAK0C,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAC9B3C,OAAA;MAAK0C,SAAS,EAAC,cAAc;MAAAC,QAAA,eACzB3C,OAAA;QAAM4C,QAAQ,EAAEtC,YAAa;QAAAqC,QAAA,eACzB3C,OAAA;UACI6C,IAAI,EAAC,MAAM;UACXH,SAAS,EAAC,aAAa;UACvBI,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE5C,QAAS;UAChB6C,QAAQ,EAAGzC,CAAC,IAAKH,SAAS,CAACG,CAAC,CAAC0C,MAAM,CAACF,KAAK;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAC7C;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACL,eACNrD,OAAA;MAAK0C,SAAS,EAAC,WAAW;MAAAC,QAAA,eACtB3C,OAAA;QAAKsD,GAAG,EAAC,MAAM;QAACC,GAAG,EAAC,iBAAiB;QAACC,KAAK,EAAC;MAAM;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClD,eACNrD,OAAA;MAAK0C,SAAS,EAAC,WAAW;MAAAC,QAAA,eACtB3C,OAAA;QAAKsD,GAAG,EAAC,MAAM;QAACC,GAAG,EAAC,gBAAgB;QAACC,KAAK,EAAC;MAAM;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACjD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEd;AAACnD,EAAA,CA1EuBD,OAAO;AAAAwD,EAAA,GAAPxD,OAAO;AA0E9B;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}